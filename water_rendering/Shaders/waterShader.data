`
#include <engine/Math/Mat4.hpp>
`

struct WaterShaderVertex {
	Vec2 position;

	`
	bool operator==(const WaterShaderVertex&) const = default;
	`
}

shader WaterShader {
	vertexStruct = WaterShaderVertex;
	vertInstance = {
		Mat4 transform;
		Vec2 offset;
	};
	vertOut = {
		Vec3 unnormalizedNormal;
		Vec3 fragmentWorldPosition;
		i32 iterations;
	};
	fragUniforms = [[Gui, Json]] {
		Vec3 [[NoJsonSerialize, NoGui]] cameraPosition;
		Vec3 [[NoJsonSerialize, NoGui]] directionalLightDirection;
		color3 scatteringColor;

		bool displayLodLevels;
	};
	vertUniforms = [[Gui, Json]] {
		float [[NoJsonSerialize, NoGui]] time;
		float maxQualityDistance;
		float minQualityDistance;
		i32 maxIterations;
	};
}